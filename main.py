import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F
import os
from dotenv import load_dotenv

# ---------------- CONFIG ----------------
load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç .env

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ---------------- TERMS (static) ----------------
terms_eng = {
    "üì¶ Basics": {
        "Load": "Cargo or shipment that is transported from one location to another. Example: a truckload of drinks from Coca-Cola‚Äôs warehouse to Walmart.",
        "Pickup (PU)": "The exact location and scheduled time where the driver collects the cargo. Example: driver must be at the warehouse by 10:00 AM.",
        "Delivery (DEL)": "The final location where the cargo must be unloaded and delivered. Example: store distribution center.",
        "Shipper": "The company or person who sends the cargo. Example: Pepsi, Amazon warehouse.",
        "Consignee / Receiver": "The company or person who receives the cargo. Example: Walmart, Costco.",
        "Driver": "The truck driver responsible for transporting the load safely and on time.",
    },
    "üïê Time & Status": {
        "ETA": "Estimated Time of Arrival ‚Äî when the driver is expected to arrive. Example: ETA 3:45 PM.",
        "ETD": "Estimated Time of Departure ‚Äî when the driver is expected to leave. Example: ETD 7:00 AM from warehouse.",
        "On Time": "Cargo is expected to be delivered according to the schedule.",
        "Delay": "The driver or cargo is late for pickup/delivery. Can be due to traffic, weather, or warehouse delays.",
        "Check call": "A regular call from the driver to update location and status. Example: 'I‚Äôm 100 miles away, arriving in 2 hours.'",
        "In transit": "The cargo is currently on the road, moving towards its destination.",
        "Empty / Available": "The driver has no load and is ready for the next shipment.",
        "Loaded / Under load": "The driver currently has a cargo on board and is delivering it.",
    },
    "üìë Documents": {
        "BOL": "Bill of Lading ‚Äî the main legal shipping document. Includes shipper, receiver, cargo details, and must be signed.",
        "POD": "Proof of Delivery ‚Äî signed paper confirming that cargo was delivered successfully.",
        "Rate confirmation": "Agreement between broker and carrier confirming the freight rate, route, and terms of shipment.",
        "Lumper receipt": "Receipt for unloading services (paid when warehouse staff unloads the truck).",
    },
    "üí∏ Money & Rates": {
        "Rate": "The total payment agreed for transporting the load.",
        "TONU": "Truck Ordered, Not Used ‚Äî money paid if a truck was ordered but the load got cancelled.",
        "Detention": "Extra payment when a driver waits longer than free time (usually after 2 free hours).",
        "Layover": "Payment for when the driver must wait overnight due to delay or schedule change.",
    },
    "üöö Equipment & Locations": {
        "Facility / Warehouse": "A place where goods are stored, loaded, or unloaded.",
        "Dock": "The ramp/platform where trucks are loaded and unloaded.",
        "Drop & Hook": "Driver drops off an empty trailer and picks up a loaded one ‚Äî no waiting.",
        "Live load / unload": "Driver waits while cargo is being loaded/unloaded (can take hours).",
        "Trailer": "The big container part of the truck where cargo is carried.",
        "Dry van": "Standard closed trailer for regular goods (boxes, pallets, furniture).",
        "Reefer": "Refrigerated trailer with cooling for perishable goods (meat, milk, fruits).",
        "Flatbed": "Open trailer for oversized or heavy loads (steel, machinery, lumber).",
        "Pallet Jack": "A manual tool to move pallets inside the warehouse.",
        "Forklift": "A powered machine with forks to lift and move pallets or heavy goods.",
    },
    "üìû Communication": {
        "Dispatcher": "The person who gives loads to drivers, tracks them, and solves problems.",
        "Broker": "Middleman who finds loads from shippers and gives them to carriers for a fee.",
        "Update": "Information about the current status of the load (location, ETA, issues).",
        "Check in / Check out": "Driver reports arrival or departure from a warehouse/facility.",
    }
}

terms_rus = {
    "üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ": {
        "Load": "–ì—Ä—É–∑ –∏–ª–∏ –ø–∞—Ä—Ç–∏—è —Ç–æ–≤–∞—Ä–∞, –ø–µ—Ä–µ–≤–æ–∑–∏–º–∞—è –∏–∑ —Ç–æ—á–∫–∏ –ê –≤ —Ç–æ—á–∫—É –ë. –ü—Ä–∏–º–µ—Ä: —Ñ—É—Ä–∞ —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –æ—Ç Coca-Cola –Ω–∞ —Å–∫–ª–∞–¥ Walmart.",
        "Pickup (PU)": "–ú–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è, –≥–¥–µ –≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑. –ü—Ä–∏–º–µ—Ä: —Å–∫–ª–∞–¥ Amazon, –≤—Ä–µ–º—è ‚Äî 10:00.",
        "Delivery (DEL)": "–ú–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≥—Ä—É–∑–∞. –ü—Ä–∏–º–µ—Ä: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞.",
        "Shipper": "–ö–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –ª–∏—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–∑. –ü—Ä–∏–º–µ—Ä: Pepsi, Amazon.",
        "Consignee / Receiver": "–ö–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –ª–∏—Ü–æ, –ø–æ–ª—É—á–∞—é—â–µ–µ –≥—Ä—É–∑. –ü—Ä–∏–º–µ—Ä: Walmart, Costco.",
        "Driver": "–í–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–∑–æ–≤–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–∑–∏—Ç –≥—Ä—É–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –≤–æ–≤—Ä–µ–º—è.",
    },
    "üïê –í—Ä–µ–º—è –∏ —Å—Ç–∞—Ç—É—Å—ã": {
        "ETA": "–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è. –ü—Ä–∏–º–µ—Ä: ETA 15:45.",
        "ETD": "–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞. –ü—Ä–∏–º–µ—Ä: ETD 07:00 —Å–æ —Å–∫–ª–∞–¥–∞.",
        "On Time": "–ì—Ä—É–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
        "Delay": "–û–ø–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è. –ü—Ä–∏—á–∏–Ω—ã: –ø—Ä–æ–±–∫–∏, –ø–æ–≥–æ–¥–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.",
        "Check call": "–ó–≤–æ–Ω–æ–∫ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–∏–º–µ—Ä: ¬´–û—Å—Ç–∞–ª–æ—Å—å 100 –º–∏–ª—å, –±—É–¥—É —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞¬ª.",
        "In transit": "–ì—Ä—É–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—É—Ç–∏.",
        "Empty / Available": "–í–æ–¥–∏—Ç–µ–ª—å —Å–≤–æ–±–æ–¥–µ–Ω, –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥—Ä—É–∑—É.",
        "Loaded / Under load": "–í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É.",
    },
    "üìë –î–æ–∫—É–º–µ–Ω—Ç—ã": {
        "BOL": "Bill of Lading (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è) ‚Äî –≥–ª–∞–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏. –í –Ω—ë–º —É–∫–∞–∑–∞–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ø–æ–ª—É—á–∞—Ç–µ–ª—å, –≥—Ä—É–∑ –∏ –ø–æ–¥–ø–∏—Å–∏ —Å—Ç–æ—Ä–æ–Ω.",
        "POD": "Proof of Delivery (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏) ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é –æ —Ç–æ–º, —á—Ç–æ –≥—Ä—É–∑ –ø–æ–ª—É—á–µ–Ω.",
        "Rate confirmation": "–î–æ–∫—É–º–µ–Ω—Ç, –≥–¥–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞, –º–∞—Ä—à—Ä—É—Ç –∏ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –º–µ–∂–¥—É –±—Ä–æ–∫–µ—Ä–æ–º –∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–º.",
        "Lumper receipt": "–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∑–∞ —Ä–∞–∑–≥—Ä—É–∑–∫—É (–∫–æ–≥–¥–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–æ–π –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–∫–ª–∞–¥–∞).",
    },
    "üí∏ –î–µ–Ω—å–≥–∏ –∏ —Å—Ç–∞–≤–∫–∏": {
        "Rate": "–û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∑–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –≥—Ä—É–∑–∞.",
        "TONU": "Truck Ordered, Not Used ‚Äî –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è, –µ—Å–ª–∏ –º–∞—à–∏–Ω—É –∑–∞–∫–∞–∑–∞–ª–∏, –∞ –≥—Ä—É–∑ –æ—Ç–º–µ–Ω–∏–ª–∏.",
        "Detention": "–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ—Å—Ç–æ–π, –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –∂–¥—ë—Ç –¥–æ–ª—å—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ 2-—Ö —á–∞—Å–æ–≤).",
        "Layover": "–û–ø–ª–∞—Ç–∞ –∑–∞ –Ω–æ—á—ë–≤–∫—É –≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫–µ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Ä–µ–π—Å–∞.",
    },
    "üöö –ú–µ—Å—Ç–∞ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {
        "Facility / Warehouse": "–°–∫–ª–∞–¥, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç, –≥—Ä—É–∑—è—Ç –∏–ª–∏ —Ä–∞–∑–≥—Ä—É–∂–∞—é—Ç —Ç–æ–≤–∞—Ä—ã.",
        "Dock": "–ü–æ–≥—Ä—É–∑–æ—á–Ω–∞—è —Ä–∞–º–ø–∞/–ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –º–∞—à–∏–Ω.",
        "Drop & Hook": "–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç—Ä–µ–π–ª–µ—Ä –∏ –∑–∞–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è).",
        "Live load / unload": "–ó–∞–≥—Ä—É–∑–∫–∞/—Ä–∞–∑–≥—Ä—É–∑–∫–∞ –ø—Ä–∏—Ü–µ–ø–∞ –ø—Ä–∏ –≤–æ–¥–∏—Ç–µ–ª–µ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏).",
        "Trailer": "–ü—Ä–∏—Ü–µ–ø –≥—Ä—É–∑–æ–≤–∏–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥—Ä—É–∑.",
        "Dry van": "–ó–∞–∫—Ä—ã—Ç—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç—Ä–µ–π–ª–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫–æ—Ä–æ–±–∫–∏, –º–µ–±–µ–ª—å).",
        "Reefer": "–•–æ–ª–æ–¥–∏–ª—å–Ω—ã–π —Ç—Ä–µ–π–ª–µ—Ä –¥–ª—è —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤ (–º–æ–ª–æ–∫–æ, –º—è—Å–æ, –æ–≤–æ—â–∏).",
        "Flatbed": "–û—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç—è–∂—ë–ª—ã—Ö –∏–ª–∏ –Ω–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ (–º–µ—Ç–∞–ª–ª, —Ç–µ—Ö–Ω–∏–∫–∞, –ª–µ—Å).",
        "Pallet Jack": "–†–æ—Ö–ª—è ‚Äî —Ä—É—á–Ω–∞—è —Ç–µ–ª–µ–∂–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–∞–ª–ª–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Å–∫–ª–∞–¥–∞.",
        "Forklift": "–ü–æ–≥—Ä—É–∑—á–∏–∫ ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥—ä—ë–º–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—è–∂—ë–ª—ã—Ö –≥—Ä—É–∑–æ–≤ –∏ –ø–∞–ª–ª–µ—Ç.",
    },
    "üìû –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": {
        "Dispatcher": "–î–∏—Å–ø–µ—Ç—á–µ—Ä ‚Äî —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä—É–∑—ã, —Å–ª–µ–¥–∏—Ç –∑–∞ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã.",
        "Broker": "–ë—Ä–æ–∫–µ—Ä ‚Äî –ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–º, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é.",
        "Update": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –≥—Ä—É–∑–∞ (–≥–¥–µ –æ–Ω, –∫–æ–≥–¥–∞ –ø—Ä–∏–±—É–¥–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã).",
        "Check in / Check out": "–û—Ç–º–µ—Ç–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∏–ª–∏ –≤—ã–µ–∑–¥–µ —Å–æ —Å–∫–ª–∞–¥–∞.",
    }
}

terms_uz = {
    "üì¶ Asosiy": {
        "Load": "Yuk yoki tashiladigan tovar. Bir joydan ikkinchi joyga olib boriladi.",
        "Pickup (PU)": "Haydovchi yukni oladigan aniq joy va vaqt.",
        "Delivery (DEL)": "Yukni tushirish va yetkazib berish manzili.",
        "Shipper": "Yukni yuboradigan kompaniya yoki shaxs.",
        "Consignee / Receiver": "Yukni qabul qiladigan kompaniya yoki shaxs.",
        "Driver": "Yuk mashinasi haydovchisi, yukni tashiydi.",
    },
    "üïê Vaqt va statuslar": {
        "ETA": "Kutilayotgan kelish vaqti.",
        "ETD": "Kutilayotgan jo‚Äònab ketish vaqti.",
        "On Time": "Yuk o‚Äòz vaqtida yetib keladi.",
        "Delay": "Yuk yoki haydovchi kechikmoqda.",
        "Check call": "Haydovchidan joylashuvini so‚Äòrash uchun qo‚Äòng‚Äòiroq.",
        "In transit": "Yuk yo‚Äòlda, manzilga yetkazilmoqda.",
        "Empty / Available": "Haydovchi bo‚Äòsh va yangi yukka tayyor.",
        "Loaded / Under load": "Haydovchida yuk bor, tashib ketmoqda.",
    },
    "üìë Hujjatlar": {
        "BOL": "Bill of Lading ‚Äî yuk hujjati, yuk tafsilotlarini tasdiqlaydi.",
        "POD": "Proof of Delivery ‚Äî yuk yetkazilganini tasdiqlovchi imzo.",
        "Rate confirmation": "Yuk stavkasi bo‚Äòyicha kelishuv.",
        "Lumper receipt": "Yuk tushirish/xizmat uchun kvitansiya.",
    },
    "üí∏ Pul va stavkalar": {
        "Rate": "Yukni tashish uchun belgilangan to‚Äòlov.",
        "TONU": "Mashina chaqirilib, yuk berilmasa to‚Äòlanadigan kompensatsiya.",
        "Detention": "Haydovchi ko‚Äòp kutganida qo‚Äòshimcha to‚Äòlov (odatda 2 soatdan keyin).",
        "Layover": "Haydovchi tunab qolsa yoki uzoq kutishga majbur bo‚Äòlsa, qo‚Äòshimcha to‚Äòlov.",
    },
    "üöö Jihoz va joylar": {
        "Facility / Warehouse": "Ombor, yuk saqlanadigan yoki ortiladigan joy.",
        "Dock": "Mashinalar yuklanadigan yoki tushiriladigan platforma.",
        "Drop & Hook": "Bo‚Äòsh treyler qoldiriladi, yuklangan treyler olinadi.",
        "Live load / unload": "Haydovchi yuk ortilishini yoki tushirilishini kutadi.",
        "Trailer": "Yuk tashiladigan mashinaning orqa qismi.",
        "Dry van": "Oddiy yopiq treyler.",
        "Reefer": "Muzlatkichli treyler, tez buziladigan mahsulotlar uchun.",
        "Flatbed": "Ochiq treyler, katta yuklar uchun.",
        "Pallet Jack": "Ruchnoy roxlya ‚Äî palletalarni qo‚Äòlda ko‚Äòchirish uchun.",
        "Forklift": "Pogruzchik ‚Äî palletalarni ko‚Äòtarish va tashish uchun texnika.",
    },
    "üìû Aloqa": {
        "Dispatcher": "Reyslarni muvofiqlashtiradigan odam.",
        "Broker": "Yuk beruvchi va tashuvchi o‚Äòrtasida vositachi.",
        "Update": "Yukning hozirgi statusi haqida ma‚Äôlumot.",
        "Check in / Check out": "Haydovchining omborga kelish yoki chiqishini belgilash.",
    }
}

terms_dicts = {"eng": terms_eng, "rus": terms_rus, "uz": terms_uz}
user_lang = {}  # —Ö—Ä–∞–Ω–∏—Ç —è–∑—ã–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# ---------------- DATABASE ----------------
conn = sqlite3.connect("templates.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS templates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    text TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY
)
""")
conn.commit()

last_message = {}

# ---------------- FSM ----------------
class AddTemplate(StatesGroup):
    waiting_for_text = State()

class EditTemplate(StatesGroup):
    waiting_for_text = State()

class Broadcast(StatesGroup):
    waiting_for_photo = State()
    waiting_for_text = State()
    confirm = State()

# ---------------- MAIN MENU ----------------
@dp.message(Command("start"))
async def start(message: types.Message):
    cursor.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (message.from_user.id,))
    conn.commit()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö Terms/–¢–µ—Ä–º–∏–Ω—ã/Terminlar", callback_data="menu:terms")],
            [InlineKeyboardButton(text="üìù Templates", callback_data="menu:templates")],
            [InlineKeyboardButton(text="‚öôÔ∏è Admin", callback_data="menu:admin")]
        ]
    )
    msg = await message.answer("Choose section:", reply_markup=kb)
    last_message[message.chat.id] = msg.message_id

# ---------------- TERMS ----------------
@dp.callback_query(lambda c: c.data == "menu:terms")
async def show_terms(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üá¨üáß Eng", callback_data="terms:eng")],
            [InlineKeyboardButton(text="üá∑üá∫ Rus", callback_data="terms:rus")],
            [InlineKeyboardButton(text="üá∫üáø Uzb", callback_data="terms:uz")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")]
        ]
    )

    await clean_and_send(callback, "üìö Choose language:", kb)


@dp.callback_query(lambda c: c.data.startswith("terms:"))
async def show_terms_categories(callback: types.CallbackQuery):
    lang = callback.data.split(":")[1]
    user_lang[callback.from_user.id] = lang
    terms = terms_dicts[lang]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=cat, callback_data=f"cat:{cat}")]
                         for cat in terms.keys()] +
                        [[InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="menu:terms")]]
    )
    await clean_and_send(callback, "üìö Categories:", kb)


@dp.callback_query(lambda c: c.data.startswith("cat:"))
async def show_category(callback: types.CallbackQuery):
    cat = callback.data.split(":", 1)[1]
    lang = user_lang.get(callback.from_user.id, "eng")
    terms = terms_dicts[lang]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=term, callback_data=f"term:{cat}:{term}")]
                         for term in terms[cat].keys()] +
                        [[InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="terms:" + lang)]]
    )
    await clean_and_send(callback, f"<b>{cat}</b>\nChoose a term:", kb)


@dp.callback_query(lambda c: c.data.startswith("term:"))
async def show_term(callback: types.CallbackQuery):
    _, cat, term = callback.data.split(":", 2)
    lang = user_lang.get(callback.from_user.id, "eng")
    terms = terms_dicts[lang]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data=f"cat:{cat}")]]
    )
    await clean_and_send(callback, f"<b>{term}</b>\n{terms[cat][term]}", kb)


# ---------------- USER TEMPLATES ----------------
@dp.callback_query(lambda c: c.data == "menu:templates")
async def list_templates(callback: types.CallbackQuery):
    cursor.execute("SELECT id, title FROM templates")
    rows = cursor.fetchall()
    if rows:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=title, callback_data=f"tpl:{tpl_id}")]
                             for tpl_id, title in rows] +
                            [[InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")]]
        )
        await clean_and_send(callback, "üìù Templates list:", kb)
    else:
        await clean_and_send(callback, "No templates yet. Add some in Admin.",
                             InlineKeyboardMarkup(
                                 inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")]]))


@dp.callback_query(lambda c: c.data.startswith("tpl:"))
async def show_template(callback: types.CallbackQuery):
    tpl_id = int(callback.data.split(":")[1])
    cursor.execute("SELECT title, text FROM templates WHERE id = ?", (tpl_id,))
    row = cursor.fetchone()
    if row:
        title, text = row
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="menu:templates")]]
        )
        await clean_and_send(callback, f"<b>{title}</b>\n<pre>{text}</pre>", kb)



# ---------------- ADMIN MENU ----------------
@dp.callback_query(lambda c: c.data == "menu:admin")
async def admin_menu(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî Access denied", show_alert=True)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï Add template", callback_data="admin:add_template")],
            [InlineKeyboardButton(text="üìÇ Manage templates", callback_data="admin:templates_list")],
            [InlineKeyboardButton(text="üì¢ Broadcast", callback_data="admin:broadcast")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è Back", callback_data="back_main")]
        ]
    )
    await clean_and_send(callback, "‚öôÔ∏è Admin panel:", kb)

# --- Broadcast flow ---
@dp.callback_query(lambda c: c.data == "admin:broadcast")
async def broadcast_start(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî Access denied", show_alert=True)

    await state.set_state(Broadcast.waiting_for_photo)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚è≠ Skip", callback_data="broadcast:skip_photo")]]
    )
    await callback.message.answer("üì∏ Send me a photo or press Skip.", reply_markup=kb)

@dp.message(Broadcast.waiting_for_photo, F.photo)
async def broadcast_get_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await state.set_state(Broadcast.waiting_for_text)
    await message.answer("üìù Now send me the text of your article.")

@dp.callback_query(lambda c: c.data == "broadcast:skip_photo")
async def broadcast_skip_photo(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(photo=None)
    await state.set_state(Broadcast.waiting_for_text)
    await callback.message.answer("üìù Now send me the text of your article.")

@dp.message(Broadcast.waiting_for_text)
async def broadcast_get_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ Send to Everyone", callback_data="broadcast:send")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è Cancel", callback_data="menu:admin")]
        ]
    )
    if data.get("photo"):
        await message.answer_photo(data["photo"], caption=data["text"], reply_markup=kb)
    else:
        await message.answer(data["text"], reply_markup=kb)
    await state.set_state(Broadcast.confirm)

@dp.callback_query(lambda c: c.data == "broadcast:send")
async def broadcast_send(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî Access denied", show_alert=True)

    data = await state.get_data()
    text = data.get("text", "")
    photo = data.get("photo")

    cursor.execute("SELECT id FROM users")
    users = cursor.fetchall()

    count = 0
    for (user_id,) in users:
        try:
            if photo:
                await bot.send_photo(user_id, photo, caption=text)
            else:
                await bot.send_message(user_id, text)
            count += 1
        except:
            pass

    await state.clear()
    await callback.message.answer(f"‚úÖ Broadcast sent to {count} users.")

# ---------------- BACK MAIN ----------------
@dp.callback_query(lambda c: c.data == "back_main")
async def back_main(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö Terms/–¢–µ—Ä–º–∏–Ω—ã", callback_data="menu:terms")],
            [InlineKeyboardButton(text="üìù Templates", callback_data="menu:templates")],
            [InlineKeyboardButton(text="‚öôÔ∏è Admin", callback_data="menu:admin")]
        ]
    )
    await clean_and_send(callback, "Choose section:", kb)

# ---------------- CLEAN HELPER ----------------
async def clean_and_send(callback, text, kb):
    chat_id = callback.message.chat.id
    try:
        await bot.delete_message(chat_id, last_message[chat_id])
    except:
        pass
    msg = await callback.message.answer(text, reply_markup=kb)
    last_message[chat_id] = msg.message_id

# ---------------- RUN ----------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
